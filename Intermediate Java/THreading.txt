package tProject;

import java.util.Random;
import java.util.Timer;

public class runnableThread extends Thread  { // can also implement the Runnable interface 
	
	private int threadNumber; 
	public runnableThread(int threadNumber) {
		this.threadNumber = threadNumber; 
	}
	
	Random random = new Random();
	int lowBound = 500;
	int highBound = 5000;
	int result = random.nextInt(highBound-lowBound) + lowBound;
	
	// This run function is registering and unregistering the objects based on a random time between .5seconds and 5 seconds
	// CHECK IF THIS IS RIGHT 
	Queue queueObject = new Queue(); 
	@Override
	public void run() { 
		try {
			queueObject.enQueue(threadNumber);
			Thread.sleep((long)(Math.random()*result));     //NEED HELP MAKING THIS RANDOM BETWEEN .5 seconds(500 milli) and 5 seconds(5000 milli) 
			queueObject.deQueue(); 
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
		
}
package tProject;

public class Queue {
	// I've Created an object from the GUI class that contains the getter to get the input from the textField 
	// The input being the amount of threads the user wants to create. 
	GUI threads = new GUI(); 
	
		private int SIZE = threads.getAmountOfThreads();
		private int[] items = new int[SIZE]; 
		private int front, rear; 
		private boolean busy = false; 
		// This Queue contains all the methods in order to enQueue and also deQueue (register and unregister objects from the Queue) 
		public Queue() { 
			front = -1; 
			rear = -1; 
		}
		public boolean isFull() { 
			if(front == 0 && rear == SIZE - 1) { 
				return true;
			}
			return false;
		}
		public boolean isEmpty() { 
			if(front == -1) { 
				return true; 
			}
			else { 
				return false; 
			}
		}
		// ?????????????????
		// NEED TO MESS WITH THIS CODE FOR REGISTERING THE THREADS TO THIS QUEUE 
		// SYNCHRONIZED MAKES IT SO THAT ONLY ONE THREAD CAN ADD ITSELF TO THE QUEUE AT A GIVEN TIME AND ONCE ITS DOWN IT NEEDS TO 
		// notifyAll(); 
		public synchronized void enQueue(int element) throws InterruptedException { 
			while(busy) wait(); 
			if(isFull()) { 
				System.out.print("Queue is full"); 
				System.exit(1);
			}
			else { 
					if(front == -1 ) {
						front = 0; 
					}
					rear++;
					items[rear] = element; 
					System.out.println("Insert " + element);
				}
			notifyAll(); 
		}
		//NEED TO MESS WITH THIS CODE FOR REGISTERING THE THREADS TO THIS QUEUE 
		// SYNCHRONIZED MAKES IT SO THAT ONLY ONE THREAD CAN ADD ITSELF TO THE QUEUE AT A GIVEN TIME AND ONCE ITS DOWN IT NEEDS TO 
		// notifyAll();
		public synchronized int deQueue() throws InterruptedException {
			while(busy) wait(); 
			int element = 0; 
			if(isEmpty()) { 
				System.out.println("Queue is empty");
				System.exit(1);
			}
			else {
				element = items[front];
				if(front >= rear) { 
					front = -1; 
					rear = -1; 
				}
					else { 
						front++; 
					}
			System.out.println(element + "Deleted");
			return(element);
			}
			System.out.println(element + "Deleted");
			return(element);
			//notifyAll(); // WHY THIS ISNT WORKING 
		}
		
			public void display() {
			    for (int i = 0; i < SIZE; i++) {
			        System.out.println(items[(front + i) % SIZE]);
			    }
			}
}
package tProject;

import javax.swing.*; 
import java.awt.*; 

public class main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//GUI g = new GUI(); 
		GUI g = new GUI(); 
	}

}
package tProject;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class GUI implements ActionListener {
	
	private JTextField enterThreads; 
	private JTextArea displayThreads;
	private JButton stop; 
	public GUI()  { 

		JFrame frame = new JFrame("My First GUI"); 
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(300,300); 
		//frame.getContentPane().add(start); 
		 
		
		JPanel centralPanel = new JPanel(); 
		JPanel northPanel = new JPanel(); 
		displayThreads = new JTextArea(0,5); 
		enterThreads = new JTextField(10); 
		JLabel titleStatement = new JLabel("Enter Amount of Threads Below:");
		JLabel displayStatement = new JLabel("Total Amount of Threads Running:");
		JButton start = new JButton("Start Threading");
		start.addActionListener(this);
		stop = new JButton("STOP Threading");
		//stop.addActionListener(stopFunction);
		northPanel.add(BorderLayout.NORTH, displayStatement);
		northPanel.add(displayThreads);
		centralPanel.add(BorderLayout.NORTH, titleStatement);
		centralPanel.add(enterThreads); 
		centralPanel.add(start);
		frame.getContentPane().add(BorderLayout.CENTER, centralPanel); 
		frame.getContentPane().add(BorderLayout.NORTH, northPanel);
		frame.setVisible(true);
	}
	// ACTION LISTENER FOR STOPPING PROGRAM
	public GUI(ActionListener stopFunction) {
		stop.addActionListener(stopFunction);
		System.exit(1); 
	}
	//ACTION LISTENER FOR CREATING THE THREADS AFTER GETTING THE NUMBER FROM THE TEXTFIELD THAT THE USER HAS INPUT
	public void actionPerformed(ActionEvent e) { 
		String stringOfThreads = enterThreads.getText(); 
		int numberOfThreads = Integer.parseInt(stringOfThreads);
		for(int i=0; i<=numberOfThreads; i++) {
			runnableThread rt = new runnableThread(i); 
			rt.start(); /// WILL NEED THIS TO CREATE THE THREADS 
		}
		displayThreads.setText(stringOfThreads);   /// NEED THIS TO KEEP UPDATING THE DISPLAY OF ACTIVE THREADS 
	}
// GETTING AN ERROR HERE ????????????????????????????????????????????
	String stringOfThreads = enterThreads.getText(); 
	int numberOfThreads = Integer.parseInt(stringOfThreads);
	
	public int getAmountOfThreads() {
	    return numberOfThreads;
	  }
	public void setColor(int t) {
	    this.numberOfThreads = t;
	  }
}